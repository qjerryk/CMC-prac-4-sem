Комплексное задание, которое объединяет в себе DZ2, DZ3, DZ4
Требуется написать класс mstring для организации работы со строками.

Описание класса обязательно должно содержать:

конструктор по умолчанию,
конструктор копирования,
конструктор преобразования из строки в стиле языка Си (const char *),
деструктор.
Класс должен обладать следующими методами:(прототипы смотрите ниже)

length() - Определение длины строки,
isempty() - Определение пуста строка или нет, (возвращает true если пустая и false иначе)
add() - Добавление символа в конец данной строки,
add() - Добавление строки в конец данной строки,
insert() - Вставка символа в заданную позицию исходной строки (в т.ч. в нулевую позицию, т.е. в начало строки),
insert() Вставка строки в заданную позицию исходной строки (в т.ч. в нулевую позицию, т.е. в начало строки),
del() - Удаление символа, по заданной позиции символа в строке,
del() - Удаление подстроки, по заданной начальной и конечной позиции подстроки в строке,
search() - Поиск подстроки в строке (возвращает позицию начала первого вхождения подстроки в строке или -1 если такой подстроки нет),
replace() - Замена подстроки (первого вхождения) в строке на заданную строку, если такой подстроки в строке нет, то строку не менять.
print() - Печать строки на экран.

Для уже созданного в задании DZ-2 класса mstring перегрузить следующие символы стандартных операций:

операция "+" - соединение двух строк
операция "*" - умножение на константу n (n ≥ 0)- повторение слова n раз (необходимо предусмотреть варианты умножения константы на строку и строки на константу; примеры: "web" * 3 = "webwebweb", 2 * "cat" = "catcat")
операция "=" - выполняет присваивание одной строки другой ( с соответствующим изменением длины строки)
операция ">" - возвращает true, если первая строка лексикографически больше второй строки и false иначе.
операция "<" - возвращает true, если первая строка лексикографически меньше второй строки и false иначе.
операция ">=" - возвращает true, если первая строка лексикографически не меньше второй строки и false иначе.
операция "<=" - возвращает true, если первая строка лексикографически не больше второй строки и false иначе.
операция "==" - возвращает true, если первая строка лексикографически равна второй строке и false иначе.
операция "[ ]" - возвращает символ с заданным номером, нумерация с нуля
операция "<<" - операция вставки в выходной поток.
операция ">>" - операция считывания из входного потока. Строка считывается до первого символа '\n' или до EOF, в зависимости от того что будет раньше. При этом сам символ '\n' в строку не добавляется, но из входного потока удаляется.

Используя исключения, предусмотреть обработку внештатных ситуаций (слишком большая или отрицательная позиция вставки и т.д.), которые могут возникнуть при использовании класса mstring (см. задание DZ-2 и DZ-3)

Исключения, генерируемые методами класса mstring, должны быть оформлены в виде пользовательского класса или группы классов. К исключениям, которые кидаются библиотечными функциями и операторами языка (напр. bad_alloc), это не относится.

Вместе с описанием класса (или классов) обязательно должна быть функция main() следующего вида:

int main()
{
try
{
error();
}
catch( ) { ... }
...
return 0;
}
В функции main() catch один или несколько описать самостоятельно. Саму функцию error() подставит ejudge ее писать не надо.

Output format
Формат исключения должен быть в виде:

Exception: problem in %s incorrect parameter:%d

или
Exception: problem in %s incorrect parameter:%d %d

где %s это имя метода, в котором произошло исключение, исключение в операции приводит к выводу вместо %s соответствующего метода operator. Вместо %d выводятся некорректный параметр или параметры если их несколько, при этом если один параметр корректный, а другой нет выводим оба. При этом мы считаем, что метод получает в качестве аргумента правильные символы или строки, поэтому аргументы (char и char*) выводит не нужно.

Все исключения выводить в поток ошибок (stderr), все остальное выводится в stdout
